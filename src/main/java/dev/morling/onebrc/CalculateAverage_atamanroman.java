/*
 *  Copyright 2023 The original authors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package dev.morling.onebrc;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.Collectors;

public class CalculateAverage_atamanroman {

    private static final String FILE = "./measurements.txt";
    private static final int MAX_CHUNK_SIZE = 2_000_000_000;

    static Map<String, CityTemps> averages = new ConcurrentHashMap<>();
    static ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();

    public static void main(String[] args) throws IOException, InterruptedException {
        long chunkStart = 0;
        try (RandomAccessFile file = new RandomAccessFile(args.length == 1 ? args[0] : FILE,
                "rw"); FileChannel channel = file.getChannel()) {
            List<MappedMemoryChunk> chunks = new ArrayList<>(100);
            MappedMemoryChunk chunk;
          while ((chunk = alignChunk(channel, chunkStart, efficientChunkSize())) != null) {
                chunkStart += chunk.size;
                chunks.add(chunk);
            }
            chunks.stream().map(c -> (Runnable) () -> {
                try {
                    parseChunk(c);
                }
                catch (Throwable e) {
                    System.out.println("Failed to parse chunk!");
                    e.printStackTrace();
                    throw e;
                }
            }).forEach(r -> executor.submit(r));
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        }
        try {
            printSummary();
        }
        catch (Throwable e) {
            System.out.println("Failed to print summary!");
            e.printStackTrace();
            throw e;
        }
    }

    private static int efficientChunkSize() {
        return 1000 * 1000 * 10; // 10mb chunks ~ 1300 virtual threads
    }

    /**
     * Align MappedMemory with the lines.
     * <p>
     * Reads back to the last \n and then returns that
     */
    private static MappedMemoryChunk alignChunk(FileChannel chan, long chunkStart,
                                                final int initialChunkSize) {
        try {
            if (chunkStart >= chan.size()) {
                return null;
            }

            int actualChunkSize = initialChunkSize;
            if (actualChunkSize > (chan.size() - chunkStart)) {
                actualChunkSize = (int) (chan.size() - chunkStart);
            }
            MappedByteBuffer chunk = chan.map(MapMode.READ_ONLY, chunkStart, actualChunkSize);
            int charsBack = seekNewlineBackwards(chunk);
            actualChunkSize = actualChunkSize - charsBack;
            chunk.limit(actualChunkSize);
            return new MappedMemoryChunk(chunk, actualChunkSize);
        }
        catch (IOException e) {
            throw new RuntimeException("Failed to memory map chunk", e);
        }
    }

    private static int seekNewlineBackwards(MappedByteBuffer chunk) {
        int charsBack = 0;
        while (chunk.get(chunk.limit() - 1 - charsBack) != '\n') {
            charsBack++;
        }
        return charsBack;
    }

    private static void parseChunk(MappedMemoryChunk chunk) {
        var buf = new byte[chunk.size];
        chunk.buf.get(buf);
        int lineStart = 0;
        int lineBytes = 0;
        for (int pos = 0; pos < chunk.size; pos++) {
            byte ch = buf[pos];
            lineBytes++;
            if (ch == '\n') {
                var line = Arrays.copyOfRange(buf, lineStart, lineBytes - 1); // don't read the \n
                var separatorPosition = findSeparator(line);
                var city = parseCity(line, separatorPosition);
                addReading(city, parseTemp(line, separatorPosition));
                lineStart = pos + 1; // skip \n
            }
        }
    }

    private static int findSeparator(byte[] line) {
        var split = -1;
        for (int n = 0; n < line.length; n++) {
            if (line[n] == ';') {
                split = n;
            }
        }
        return split;
    }

    private static void addReading(String city, double temp) {
        averages.compute(city, (_, v) -> {
            if (v == null) {
                return new CityTemps(city, temp);
            }
            else {
                synchronized (city) {
                    v.addReading(temp);
                    return v;
                }
            }
        });
    }

    private static double parseTemp(byte[] line, int split) {
        return ByteTemp.lookup(Arrays.copyOfRange(line, split + 1, line.length));
    }

    private static String parseCity(byte[] line, int split) {
        return new String(Arrays.copyOfRange(line, 0, split));
    }

  private static void printSummary() {
    System.out.print("{");
    System.out.print(averages.values().stream().map(CityTemps::formatted).sorted()
        .collect(Collectors.joining(", ")));
    System.out.print("}");
    var totalReads = averages.values().stream().mapToLong(cityTemps -> cityTemps.reads).sum();
    System.out.println(STR."\nRead \{totalReads} lines!");
  }

    static class CityTemps {

        static final DecimalFormat DOUBLE_FORMAT;

        static {
            DOUBLE_FORMAT = (DecimalFormat) NumberFormat.getNumberInstance(Locale.US);
            DOUBLE_FORMAT.setMinimumFractionDigits(1);
            DOUBLE_FORMAT.setMaximumFractionDigits(1);
        }

        private final String city;
        private double sum = 0;
        private double min = 0;
        private double max = 0;
        private long reads = 0;

        ReentrantLock lock = new ReentrantLock();

        public CityTemps(String city) {
            this.city = city;
        }

        public CityTemps(String city, double first) {
            this(city);
            min = max = sum = first;
            reads = 1;
        }

        void addReading(double temp) {
            lock.lock();
            try {
                sum += temp;
                reads += 1;
                if (temp > max) {
                    max = temp;
                }
                if (temp < min) {
                    min = temp;
                }
            }
            finally {
                lock.unlock();
            }
        }

        public double avg() {
            return sum / reads;
        }

    private String formatted() {
      return STR."\{city}=\{min}/\{DOUBLE_FORMAT.format(avg())}/\{max}";
    }
    }

    record MappedMemoryChunk(MappedByteBuffer buf, int size) {

    }

  /**
   * minimal representation of temps in the range of -99.9 to 99.9
   */
  record ByteTemp(byte one, byte two, byte three, byte four, byte five) {

    private static final Map<ByteTemp, Double> temps = new HashMap<>();

    private static double lookup(byte[] bytes) {
      return switch (bytes.length) {
        case 3 -> temps.get(new ByteTemp(bytes[0], bytes[1], bytes[2]));
        case 4 -> temps.get(new ByteTemp(bytes[0], bytes[1], bytes[2], bytes[3]));
        case 5 -> temps.get(new ByteTemp(bytes[0], bytes[1], bytes[2], bytes[3], bytes[4]));
        default ->
            throw new IllegalStateException(STR."Invalid temp bytes: \{Arrays.toString(bytes)}");
      };
    }

    static {
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x30), -99.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x31), -99.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x32), -99.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x33), -99.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x34), -99.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x35), -99.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x36), -99.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x37), -99.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x38), -99.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x39, 0x2E, 0x39), -99.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x30), -98.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x31), -98.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x32), -98.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x33), -98.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x34), -98.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x35), -98.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x36), -98.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x37), -98.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x38), -98.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x38, 0x2E, 0x39), -98.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x30), -97.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x31), -97.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x32), -97.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x33), -97.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x34), -97.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x35), -97.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x36), -97.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x37), -97.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x38), -97.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x37, 0x2E, 0x39), -97.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x30), -96.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x31), -96.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x32), -96.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x33), -96.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x34), -96.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x35), -96.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x36), -96.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x37), -96.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x38), -96.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x36, 0x2E, 0x39), -96.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x30), -95.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x31), -95.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x32), -95.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x33), -95.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x34), -95.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x35), -95.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x36), -95.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x37), -95.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x38), -95.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x35, 0x2E, 0x39), -95.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x30), -94.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x31), -94.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x32), -94.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x33), -94.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x34), -94.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x35), -94.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x36), -94.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x37), -94.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x38), -94.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x34, 0x2E, 0x39), -94.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x30), -93.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x31), -93.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x32), -93.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x33), -93.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x34), -93.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x35), -93.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x36), -93.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x37), -93.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x38), -93.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x33, 0x2E, 0x39), -93.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x30), -92.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x31), -92.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x32), -92.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x33), -92.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x34), -92.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x35), -92.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x36), -92.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x37), -92.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x38), -92.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x32, 0x2E, 0x39), -92.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x30), -91.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x31), -91.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x32), -91.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x33), -91.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x34), -91.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x35), -91.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x36), -91.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x37), -91.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x38), -91.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x31, 0x2E, 0x39), -91.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x30), -90.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x31), -90.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x32), -90.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x33), -90.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x34), -90.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x35), -90.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x36), -90.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x37), -90.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x38), -90.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x30, 0x2E, 0x39), -90.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x30), -89.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x31), -89.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x32), -89.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x33), -89.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x34), -89.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x35), -89.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x36), -89.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x37), -89.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x38), -89.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x39, 0x2E, 0x39), -89.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x30), -88.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x31), -88.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x32), -88.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x33), -88.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x34), -88.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x35), -88.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x36), -88.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x37), -88.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x38), -88.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x38, 0x2E, 0x39), -88.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x30), -87.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x31), -87.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x32), -87.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x33), -87.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x34), -87.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x35), -87.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x36), -87.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x37), -87.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x38), -87.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x37, 0x2E, 0x39), -87.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x30), -86.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x31), -86.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x32), -86.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x33), -86.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x34), -86.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x35), -86.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x36), -86.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x37), -86.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x38), -86.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x36, 0x2E, 0x39), -86.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x30), -85.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x31), -85.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x32), -85.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x33), -85.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x34), -85.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x35), -85.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x36), -85.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x37), -85.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x38), -85.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x35, 0x2E, 0x39), -85.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x30), -84.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x31), -84.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x32), -84.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x33), -84.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x34), -84.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x35), -84.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x36), -84.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x37), -84.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x38), -84.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x34, 0x2E, 0x39), -84.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x30), -83.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x31), -83.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x32), -83.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x33), -83.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x34), -83.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x35), -83.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x36), -83.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x37), -83.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x38), -83.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x33, 0x2E, 0x39), -83.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x30), -82.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x31), -82.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x32), -82.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x33), -82.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x34), -82.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x35), -82.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x36), -82.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x37), -82.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x38), -82.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x32, 0x2E, 0x39), -82.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x30), -81.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x31), -81.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x32), -81.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x33), -81.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x34), -81.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x35), -81.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x36), -81.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x37), -81.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x38), -81.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x31, 0x2E, 0x39), -81.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x30), -80.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x31), -80.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x32), -80.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x33), -80.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x34), -80.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x35), -80.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x36), -80.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x37), -80.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x38), -80.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x30, 0x2E, 0x39), -80.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x30), -79.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x31), -79.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x32), -79.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x33), -79.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x34), -79.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x35), -79.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x36), -79.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x37), -79.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x38), -79.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x39, 0x2E, 0x39), -79.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x30), -78.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x31), -78.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x32), -78.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x33), -78.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x34), -78.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x35), -78.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x36), -78.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x37), -78.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x38), -78.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x38, 0x2E, 0x39), -78.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x30), -77.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x31), -77.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x32), -77.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x33), -77.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x34), -77.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x35), -77.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x36), -77.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x37), -77.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x38), -77.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x37, 0x2E, 0x39), -77.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x30), -76.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x31), -76.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x32), -76.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x33), -76.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x34), -76.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x35), -76.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x36), -76.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x37), -76.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x38), -76.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x36, 0x2E, 0x39), -76.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x30), -75.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x31), -75.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x32), -75.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x33), -75.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x34), -75.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x35), -75.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x36), -75.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x37), -75.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x38), -75.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x35, 0x2E, 0x39), -75.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x30), -74.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x31), -74.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x32), -74.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x33), -74.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x34), -74.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x35), -74.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x36), -74.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x37), -74.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x38), -74.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x34, 0x2E, 0x39), -74.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x30), -73.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x31), -73.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x32), -73.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x33), -73.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x34), -73.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x35), -73.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x36), -73.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x37), -73.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x38), -73.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x33, 0x2E, 0x39), -73.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x30), -72.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x31), -72.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x32), -72.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x33), -72.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x34), -72.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x35), -72.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x36), -72.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x37), -72.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x38), -72.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x32, 0x2E, 0x39), -72.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x30), -71.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x31), -71.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x32), -71.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x33), -71.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x34), -71.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x35), -71.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x36), -71.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x37), -71.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x38), -71.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x31, 0x2E, 0x39), -71.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x30), -70.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x31), -70.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x32), -70.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x33), -70.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x34), -70.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x35), -70.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x36), -70.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x37), -70.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x38), -70.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x30, 0x2E, 0x39), -70.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x30), -69.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x31), -69.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x32), -69.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x33), -69.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x34), -69.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x35), -69.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x36), -69.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x37), -69.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x38), -69.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x39, 0x2E, 0x39), -69.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x30), -68.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x31), -68.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x32), -68.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x33), -68.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x34), -68.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x35), -68.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x36), -68.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x37), -68.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x38), -68.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x38, 0x2E, 0x39), -68.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x30), -67.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x31), -67.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x32), -67.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x33), -67.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x34), -67.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x35), -67.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x36), -67.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x37), -67.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x38), -67.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x37, 0x2E, 0x39), -67.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x30), -66.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x31), -66.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x32), -66.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x33), -66.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x34), -66.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x35), -66.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x36), -66.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x37), -66.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x38), -66.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x36, 0x2E, 0x39), -66.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x30), -65.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x31), -65.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x32), -65.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x33), -65.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x34), -65.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x35), -65.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x36), -65.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x37), -65.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x38), -65.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x35, 0x2E, 0x39), -65.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x30), -64.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x31), -64.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x32), -64.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x33), -64.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x34), -64.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x35), -64.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x36), -64.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x37), -64.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x38), -64.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x34, 0x2E, 0x39), -64.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x30), -63.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x31), -63.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x32), -63.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x33), -63.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x34), -63.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x35), -63.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x36), -63.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x37), -63.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x38), -63.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x33, 0x2E, 0x39), -63.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x30), -62.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x31), -62.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x32), -62.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x33), -62.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x34), -62.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x35), -62.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x36), -62.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x37), -62.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x38), -62.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x32, 0x2E, 0x39), -62.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x30), -61.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x31), -61.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x32), -61.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x33), -61.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x34), -61.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x35), -61.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x36), -61.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x37), -61.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x38), -61.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x31, 0x2E, 0x39), -61.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x30), -60.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x31), -60.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x32), -60.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x33), -60.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x34), -60.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x35), -60.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x36), -60.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x37), -60.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x38), -60.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x30, 0x2E, 0x39), -60.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x30), -59.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x31), -59.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x32), -59.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x33), -59.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x34), -59.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x35), -59.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x36), -59.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x37), -59.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x38), -59.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x39, 0x2E, 0x39), -59.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x30), -58.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x31), -58.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x32), -58.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x33), -58.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x34), -58.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x35), -58.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x36), -58.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x37), -58.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x38), -58.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x38, 0x2E, 0x39), -58.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x30), -57.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x31), -57.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x32), -57.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x33), -57.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x34), -57.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x35), -57.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x36), -57.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x37), -57.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x38), -57.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x37, 0x2E, 0x39), -57.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x30), -56.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x31), -56.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x32), -56.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x33), -56.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x34), -56.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x35), -56.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x36), -56.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x37), -56.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x38), -56.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x36, 0x2E, 0x39), -56.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x30), -55.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x31), -55.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x32), -55.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x33), -55.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x34), -55.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x35), -55.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x36), -55.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x37), -55.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x38), -55.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x35, 0x2E, 0x39), -55.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x30), -54.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x31), -54.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x32), -54.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x33), -54.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x34), -54.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x35), -54.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x36), -54.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x37), -54.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x38), -54.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x34, 0x2E, 0x39), -54.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x30), -53.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x31), -53.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x32), -53.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x33), -53.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x34), -53.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x35), -53.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x36), -53.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x37), -53.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x38), -53.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x33, 0x2E, 0x39), -53.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x30), -52.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x31), -52.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x32), -52.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x33), -52.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x34), -52.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x35), -52.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x36), -52.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x37), -52.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x38), -52.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x32, 0x2E, 0x39), -52.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x30), -51.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x31), -51.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x32), -51.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x33), -51.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x34), -51.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x35), -51.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x36), -51.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x37), -51.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x38), -51.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x31, 0x2E, 0x39), -51.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x30), -50.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x31), -50.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x32), -50.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x33), -50.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x34), -50.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x35), -50.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x36), -50.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x37), -50.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x38), -50.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x30, 0x2E, 0x39), -50.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x30), -49.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x31), -49.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x32), -49.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x33), -49.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x34), -49.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x35), -49.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x36), -49.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x37), -49.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x38), -49.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x39, 0x2E, 0x39), -49.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x30), -48.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x31), -48.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x32), -48.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x33), -48.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x34), -48.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x35), -48.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x36), -48.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x37), -48.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x38), -48.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x38, 0x2E, 0x39), -48.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x30), -47.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x31), -47.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x32), -47.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x33), -47.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x34), -47.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x35), -47.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x36), -47.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x37), -47.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x38), -47.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x37, 0x2E, 0x39), -47.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x30), -46.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x31), -46.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x32), -46.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x33), -46.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x34), -46.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x35), -46.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x36), -46.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x37), -46.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x38), -46.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x36, 0x2E, 0x39), -46.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x30), -45.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x31), -45.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x32), -45.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x33), -45.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x34), -45.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x35), -45.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x36), -45.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x37), -45.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x38), -45.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x35, 0x2E, 0x39), -45.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x30), -44.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x31), -44.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x32), -44.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x33), -44.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x34), -44.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x35), -44.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x36), -44.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x37), -44.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x38), -44.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x34, 0x2E, 0x39), -44.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x30), -43.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x31), -43.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x32), -43.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x33), -43.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x34), -43.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x35), -43.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x36), -43.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x37), -43.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x38), -43.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x33, 0x2E, 0x39), -43.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x30), -42.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x31), -42.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x32), -42.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x33), -42.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x34), -42.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x35), -42.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x36), -42.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x37), -42.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x38), -42.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x32, 0x2E, 0x39), -42.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x30), -41.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x31), -41.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x32), -41.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x33), -41.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x34), -41.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x35), -41.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x36), -41.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x37), -41.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x38), -41.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x31, 0x2E, 0x39), -41.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x30), -40.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x31), -40.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x32), -40.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x33), -40.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x34), -40.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x35), -40.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x36), -40.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x37), -40.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x38), -40.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x30, 0x2E, 0x39), -40.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x30), -39.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x31), -39.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x32), -39.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x33), -39.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x34), -39.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x35), -39.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x36), -39.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x37), -39.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x38), -39.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x39, 0x2E, 0x39), -39.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x30), -38.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x31), -38.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x32), -38.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x33), -38.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x34), -38.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x35), -38.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x36), -38.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x37), -38.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x38), -38.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x38, 0x2E, 0x39), -38.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x30), -37.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x31), -37.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x32), -37.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x33), -37.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x34), -37.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x35), -37.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x36), -37.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x37), -37.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x38), -37.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x37, 0x2E, 0x39), -37.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x30), -36.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x31), -36.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x32), -36.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x33), -36.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x34), -36.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x35), -36.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x36), -36.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x37), -36.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x38), -36.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x36, 0x2E, 0x39), -36.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x30), -35.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x31), -35.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x32), -35.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x33), -35.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x34), -35.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x35), -35.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x36), -35.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x37), -35.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x38), -35.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x35, 0x2E, 0x39), -35.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x30), -34.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x31), -34.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x32), -34.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x33), -34.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x34), -34.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x35), -34.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x36), -34.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x37), -34.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x38), -34.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x34, 0x2E, 0x39), -34.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x30), -33.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x31), -33.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x32), -33.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x33), -33.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x34), -33.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x35), -33.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x36), -33.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x37), -33.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x38), -33.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x33, 0x2E, 0x39), -33.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x30), -32.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x31), -32.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x32), -32.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x33), -32.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x34), -32.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x35), -32.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x36), -32.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x37), -32.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x38), -32.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x32, 0x2E, 0x39), -32.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x30), -31.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x31), -31.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x32), -31.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x33), -31.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x34), -31.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x35), -31.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x36), -31.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x37), -31.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x38), -31.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x31, 0x2E, 0x39), -31.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x30), -30.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x31), -30.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x32), -30.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x33), -30.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x34), -30.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x35), -30.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x36), -30.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x37), -30.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x38), -30.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x30, 0x2E, 0x39), -30.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x30), -29.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x31), -29.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x32), -29.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x33), -29.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x34), -29.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x35), -29.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x36), -29.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x37), -29.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x38), -29.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x39, 0x2E, 0x39), -29.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x30), -28.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x31), -28.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x32), -28.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x33), -28.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x34), -28.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x35), -28.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x36), -28.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x37), -28.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x38), -28.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x38, 0x2E, 0x39), -28.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x30), -27.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x31), -27.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x32), -27.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x33), -27.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x34), -27.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x35), -27.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x36), -27.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x37), -27.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x38), -27.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x37, 0x2E, 0x39), -27.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x30), -26.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x31), -26.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x32), -26.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x33), -26.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x34), -26.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x35), -26.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x36), -26.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x37), -26.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x38), -26.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x36, 0x2E, 0x39), -26.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x30), -25.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x31), -25.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x32), -25.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x33), -25.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x34), -25.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x35), -25.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x36), -25.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x37), -25.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x38), -25.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x35, 0x2E, 0x39), -25.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x30), -24.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x31), -24.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x32), -24.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x33), -24.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x34), -24.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x35), -24.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x36), -24.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x37), -24.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x38), -24.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x34, 0x2E, 0x39), -24.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x30), -23.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x31), -23.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x32), -23.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x33), -23.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x34), -23.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x35), -23.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x36), -23.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x37), -23.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x38), -23.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x33, 0x2E, 0x39), -23.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x30), -22.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x31), -22.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x32), -22.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x33), -22.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x34), -22.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x35), -22.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x36), -22.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x37), -22.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x38), -22.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x32, 0x2E, 0x39), -22.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x30), -21.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x31), -21.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x32), -21.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x33), -21.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x34), -21.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x35), -21.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x36), -21.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x37), -21.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x38), -21.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x31, 0x2E, 0x39), -21.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x30), -20.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x31), -20.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x32), -20.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x33), -20.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x34), -20.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x35), -20.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x36), -20.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x37), -20.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x38), -20.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x30, 0x2E, 0x39), -20.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x30), -19.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x31), -19.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x32), -19.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x33), -19.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x34), -19.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x35), -19.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x36), -19.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x37), -19.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x38), -19.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x39, 0x2E, 0x39), -19.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x30), -18.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x31), -18.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x32), -18.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x33), -18.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x34), -18.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x35), -18.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x36), -18.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x37), -18.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x38), -18.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x38, 0x2E, 0x39), -18.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x30), -17.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x31), -17.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x32), -17.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x33), -17.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x34), -17.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x35), -17.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x36), -17.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x37), -17.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x38), -17.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x37, 0x2E, 0x39), -17.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x30), -16.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x31), -16.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x32), -16.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x33), -16.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x34), -16.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x35), -16.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x36), -16.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x37), -16.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x38), -16.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x36, 0x2E, 0x39), -16.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x30), -15.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x31), -15.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x32), -15.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x33), -15.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x34), -15.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x35), -15.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x36), -15.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x37), -15.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x38), -15.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x35, 0x2E, 0x39), -15.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x30), -14.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x31), -14.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x32), -14.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x33), -14.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x34), -14.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x35), -14.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x36), -14.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x37), -14.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x38), -14.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x34, 0x2E, 0x39), -14.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x30), -13.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x31), -13.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x32), -13.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x33), -13.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x34), -13.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x35), -13.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x36), -13.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x37), -13.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x38), -13.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x33, 0x2E, 0x39), -13.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x30), -12.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x31), -12.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x32), -12.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x33), -12.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x34), -12.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x35), -12.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x36), -12.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x37), -12.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x38), -12.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x32, 0x2E, 0x39), -12.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x30), -11.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x31), -11.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x32), -11.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x33), -11.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x34), -11.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x35), -11.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x36), -11.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x37), -11.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x38), -11.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x31, 0x2E, 0x39), -11.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x30), -10.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x31), -10.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x32), -10.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x33), -10.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x34), -10.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x35), -10.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x36), -10.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x37), -10.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x38), -10.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x30, 0x2E, 0x39), -10.9);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x30), -9.0);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x31), -9.1);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x32), -9.2);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x33), -9.3);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x34), -9.4);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x35), -9.5);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x36), -9.6);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x37), -9.7);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x38), -9.8);
      temps.put(new ByteTemp(0x2D, 0x39, 0x2E, 0x39), -9.9);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x30), -8.0);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x31), -8.1);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x32), -8.2);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x33), -8.3);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x34), -8.4);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x35), -8.5);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x36), -8.6);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x37), -8.7);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x38), -8.8);
      temps.put(new ByteTemp(0x2D, 0x38, 0x2E, 0x39), -8.9);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x30), -7.0);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x31), -7.1);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x32), -7.2);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x33), -7.3);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x34), -7.4);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x35), -7.5);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x36), -7.6);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x37), -7.7);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x38), -7.8);
      temps.put(new ByteTemp(0x2D, 0x37, 0x2E, 0x39), -7.9);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x30), -6.0);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x31), -6.1);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x32), -6.2);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x33), -6.3);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x34), -6.4);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x35), -6.5);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x36), -6.6);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x37), -6.7);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x38), -6.8);
      temps.put(new ByteTemp(0x2D, 0x36, 0x2E, 0x39), -6.9);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x30), -5.0);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x31), -5.1);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x32), -5.2);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x33), -5.3);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x34), -5.4);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x35), -5.5);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x36), -5.6);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x37), -5.7);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x38), -5.8);
      temps.put(new ByteTemp(0x2D, 0x35, 0x2E, 0x39), -5.9);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x30), -4.0);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x31), -4.1);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x32), -4.2);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x33), -4.3);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x34), -4.4);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x35), -4.5);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x36), -4.6);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x37), -4.7);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x38), -4.8);
      temps.put(new ByteTemp(0x2D, 0x34, 0x2E, 0x39), -4.9);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x30), -3.0);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x31), -3.1);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x32), -3.2);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x33), -3.3);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x34), -3.4);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x35), -3.5);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x36), -3.6);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x37), -3.7);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x38), -3.8);
      temps.put(new ByteTemp(0x2D, 0x33, 0x2E, 0x39), -3.9);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x30), -2.0);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x31), -2.1);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x32), -2.2);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x33), -2.3);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x34), -2.4);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x35), -2.5);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x36), -2.6);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x37), -2.7);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x38), -2.8);
      temps.put(new ByteTemp(0x2D, 0x32, 0x2E, 0x39), -2.9);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x30), -1.0);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x31), -1.1);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x32), -1.2);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x33), -1.3);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x34), -1.4);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x35), -1.5);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x36), -1.6);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x37), -1.7);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x38), -1.8);
      temps.put(new ByteTemp(0x2D, 0x31, 0x2E, 0x39), -1.9);
      temps.put(new ByteTemp(0x30, 0x2E, 0x30), 0.0);
      temps.put(new ByteTemp(0x30, 0x2E, 0x31), 0.1);
      temps.put(new ByteTemp(0x30, 0x2E, 0x32), 0.2);
      temps.put(new ByteTemp(0x30, 0x2E, 0x33), 0.3);
      temps.put(new ByteTemp(0x30, 0x2E, 0x34), 0.4);
      temps.put(new ByteTemp(0x30, 0x2E, 0x35), 0.5);
      temps.put(new ByteTemp(0x30, 0x2E, 0x36), 0.6);
      temps.put(new ByteTemp(0x30, 0x2E, 0x37), 0.7);
      temps.put(new ByteTemp(0x30, 0x2E, 0x38), 0.8);
      temps.put(new ByteTemp(0x30, 0x2E, 0x39), 0.9);
      temps.put(new ByteTemp(0x31, 0x2E, 0x30), 1.0);
      temps.put(new ByteTemp(0x31, 0x2E, 0x31), 1.1);
      temps.put(new ByteTemp(0x31, 0x2E, 0x32), 1.2);
      temps.put(new ByteTemp(0x31, 0x2E, 0x33), 1.3);
      temps.put(new ByteTemp(0x31, 0x2E, 0x34), 1.4);
      temps.put(new ByteTemp(0x31, 0x2E, 0x35), 1.5);
      temps.put(new ByteTemp(0x31, 0x2E, 0x36), 1.6);
      temps.put(new ByteTemp(0x31, 0x2E, 0x37), 1.7);
      temps.put(new ByteTemp(0x31, 0x2E, 0x38), 1.8);
      temps.put(new ByteTemp(0x31, 0x2E, 0x39), 1.9);
      temps.put(new ByteTemp(0x32, 0x2E, 0x30), 2.0);
      temps.put(new ByteTemp(0x32, 0x2E, 0x31), 2.1);
      temps.put(new ByteTemp(0x32, 0x2E, 0x32), 2.2);
      temps.put(new ByteTemp(0x32, 0x2E, 0x33), 2.3);
      temps.put(new ByteTemp(0x32, 0x2E, 0x34), 2.4);
      temps.put(new ByteTemp(0x32, 0x2E, 0x35), 2.5);
      temps.put(new ByteTemp(0x32, 0x2E, 0x36), 2.6);
      temps.put(new ByteTemp(0x32, 0x2E, 0x37), 2.7);
      temps.put(new ByteTemp(0x32, 0x2E, 0x38), 2.8);
      temps.put(new ByteTemp(0x32, 0x2E, 0x39), 2.9);
      temps.put(new ByteTemp(0x33, 0x2E, 0x30), 3.0);
      temps.put(new ByteTemp(0x33, 0x2E, 0x31), 3.1);
      temps.put(new ByteTemp(0x33, 0x2E, 0x32), 3.2);
      temps.put(new ByteTemp(0x33, 0x2E, 0x33), 3.3);
      temps.put(new ByteTemp(0x33, 0x2E, 0x34), 3.4);
      temps.put(new ByteTemp(0x33, 0x2E, 0x35), 3.5);
      temps.put(new ByteTemp(0x33, 0x2E, 0x36), 3.6);
      temps.put(new ByteTemp(0x33, 0x2E, 0x37), 3.7);
      temps.put(new ByteTemp(0x33, 0x2E, 0x38), 3.8);
      temps.put(new ByteTemp(0x33, 0x2E, 0x39), 3.9);
      temps.put(new ByteTemp(0x34, 0x2E, 0x30), 4.0);
      temps.put(new ByteTemp(0x34, 0x2E, 0x31), 4.1);
      temps.put(new ByteTemp(0x34, 0x2E, 0x32), 4.2);
      temps.put(new ByteTemp(0x34, 0x2E, 0x33), 4.3);
      temps.put(new ByteTemp(0x34, 0x2E, 0x34), 4.4);
      temps.put(new ByteTemp(0x34, 0x2E, 0x35), 4.5);
      temps.put(new ByteTemp(0x34, 0x2E, 0x36), 4.6);
      temps.put(new ByteTemp(0x34, 0x2E, 0x37), 4.7);
      temps.put(new ByteTemp(0x34, 0x2E, 0x38), 4.8);
      temps.put(new ByteTemp(0x34, 0x2E, 0x39), 4.9);
      temps.put(new ByteTemp(0x35, 0x2E, 0x30), 5.0);
      temps.put(new ByteTemp(0x35, 0x2E, 0x31), 5.1);
      temps.put(new ByteTemp(0x35, 0x2E, 0x32), 5.2);
      temps.put(new ByteTemp(0x35, 0x2E, 0x33), 5.3);
      temps.put(new ByteTemp(0x35, 0x2E, 0x34), 5.4);
      temps.put(new ByteTemp(0x35, 0x2E, 0x35), 5.5);
      temps.put(new ByteTemp(0x35, 0x2E, 0x36), 5.6);
      temps.put(new ByteTemp(0x35, 0x2E, 0x37), 5.7);
      temps.put(new ByteTemp(0x35, 0x2E, 0x38), 5.8);
      temps.put(new ByteTemp(0x35, 0x2E, 0x39), 5.9);
      temps.put(new ByteTemp(0x36, 0x2E, 0x30), 6.0);
      temps.put(new ByteTemp(0x36, 0x2E, 0x31), 6.1);
      temps.put(new ByteTemp(0x36, 0x2E, 0x32), 6.2);
      temps.put(new ByteTemp(0x36, 0x2E, 0x33), 6.3);
      temps.put(new ByteTemp(0x36, 0x2E, 0x34), 6.4);
      temps.put(new ByteTemp(0x36, 0x2E, 0x35), 6.5);
      temps.put(new ByteTemp(0x36, 0x2E, 0x36), 6.6);
      temps.put(new ByteTemp(0x36, 0x2E, 0x37), 6.7);
      temps.put(new ByteTemp(0x36, 0x2E, 0x38), 6.8);
      temps.put(new ByteTemp(0x36, 0x2E, 0x39), 6.9);
      temps.put(new ByteTemp(0x37, 0x2E, 0x30), 7.0);
      temps.put(new ByteTemp(0x37, 0x2E, 0x31), 7.1);
      temps.put(new ByteTemp(0x37, 0x2E, 0x32), 7.2);
      temps.put(new ByteTemp(0x37, 0x2E, 0x33), 7.3);
      temps.put(new ByteTemp(0x37, 0x2E, 0x34), 7.4);
      temps.put(new ByteTemp(0x37, 0x2E, 0x35), 7.5);
      temps.put(new ByteTemp(0x37, 0x2E, 0x36), 7.6);
      temps.put(new ByteTemp(0x37, 0x2E, 0x37), 7.7);
      temps.put(new ByteTemp(0x37, 0x2E, 0x38), 7.8);
      temps.put(new ByteTemp(0x37, 0x2E, 0x39), 7.9);
      temps.put(new ByteTemp(0x38, 0x2E, 0x30), 8.0);
      temps.put(new ByteTemp(0x38, 0x2E, 0x31), 8.1);
      temps.put(new ByteTemp(0x38, 0x2E, 0x32), 8.2);
      temps.put(new ByteTemp(0x38, 0x2E, 0x33), 8.3);
      temps.put(new ByteTemp(0x38, 0x2E, 0x34), 8.4);
      temps.put(new ByteTemp(0x38, 0x2E, 0x35), 8.5);
      temps.put(new ByteTemp(0x38, 0x2E, 0x36), 8.6);
      temps.put(new ByteTemp(0x38, 0x2E, 0x37), 8.7);
      temps.put(new ByteTemp(0x38, 0x2E, 0x38), 8.8);
      temps.put(new ByteTemp(0x38, 0x2E, 0x39), 8.9);
      temps.put(new ByteTemp(0x39, 0x2E, 0x30), 9.0);
      temps.put(new ByteTemp(0x39, 0x2E, 0x31), 9.1);
      temps.put(new ByteTemp(0x39, 0x2E, 0x32), 9.2);
      temps.put(new ByteTemp(0x39, 0x2E, 0x33), 9.3);
      temps.put(new ByteTemp(0x39, 0x2E, 0x34), 9.4);
      temps.put(new ByteTemp(0x39, 0x2E, 0x35), 9.5);
      temps.put(new ByteTemp(0x39, 0x2E, 0x36), 9.6);
      temps.put(new ByteTemp(0x39, 0x2E, 0x37), 9.7);
      temps.put(new ByteTemp(0x39, 0x2E, 0x38), 9.8);
      temps.put(new ByteTemp(0x39, 0x2E, 0x39), 9.9);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x30), 10.0);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x31), 10.1);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x32), 10.2);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x33), 10.3);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x34), 10.4);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x35), 10.5);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x36), 10.6);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x37), 10.7);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x38), 10.8);
      temps.put(new ByteTemp(0x31, 0x30, 0x2E, 0x39), 10.9);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x30), 11.0);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x31), 11.1);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x32), 11.2);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x33), 11.3);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x34), 11.4);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x35), 11.5);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x36), 11.6);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x37), 11.7);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x38), 11.8);
      temps.put(new ByteTemp(0x31, 0x31, 0x2E, 0x39), 11.9);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x30), 12.0);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x31), 12.1);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x32), 12.2);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x33), 12.3);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x34), 12.4);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x35), 12.5);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x36), 12.6);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x37), 12.7);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x38), 12.8);
      temps.put(new ByteTemp(0x31, 0x32, 0x2E, 0x39), 12.9);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x30), 13.0);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x31), 13.1);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x32), 13.2);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x33), 13.3);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x34), 13.4);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x35), 13.5);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x36), 13.6);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x37), 13.7);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x38), 13.8);
      temps.put(new ByteTemp(0x31, 0x33, 0x2E, 0x39), 13.9);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x30), 14.0);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x31), 14.1);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x32), 14.2);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x33), 14.3);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x34), 14.4);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x35), 14.5);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x36), 14.6);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x37), 14.7);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x38), 14.8);
      temps.put(new ByteTemp(0x31, 0x34, 0x2E, 0x39), 14.9);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x30), 15.0);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x31), 15.1);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x32), 15.2);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x33), 15.3);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x34), 15.4);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x35), 15.5);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x36), 15.6);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x37), 15.7);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x38), 15.8);
      temps.put(new ByteTemp(0x31, 0x35, 0x2E, 0x39), 15.9);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x30), 16.0);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x31), 16.1);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x32), 16.2);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x33), 16.3);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x34), 16.4);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x35), 16.5);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x36), 16.6);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x37), 16.7);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x38), 16.8);
      temps.put(new ByteTemp(0x31, 0x36, 0x2E, 0x39), 16.9);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x30), 17.0);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x31), 17.1);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x32), 17.2);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x33), 17.3);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x34), 17.4);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x35), 17.5);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x36), 17.6);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x37), 17.7);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x38), 17.8);
      temps.put(new ByteTemp(0x31, 0x37, 0x2E, 0x39), 17.9);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x30), 18.0);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x31), 18.1);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x32), 18.2);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x33), 18.3);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x34), 18.4);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x35), 18.5);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x36), 18.6);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x37), 18.7);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x38), 18.8);
      temps.put(new ByteTemp(0x31, 0x38, 0x2E, 0x39), 18.9);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x30), 19.0);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x31), 19.1);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x32), 19.2);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x33), 19.3);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x34), 19.4);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x35), 19.5);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x36), 19.6);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x37), 19.7);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x38), 19.8);
      temps.put(new ByteTemp(0x31, 0x39, 0x2E, 0x39), 19.9);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x30), 20.0);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x31), 20.1);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x32), 20.2);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x33), 20.3);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x34), 20.4);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x35), 20.5);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x36), 20.6);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x37), 20.7);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x38), 20.8);
      temps.put(new ByteTemp(0x32, 0x30, 0x2E, 0x39), 20.9);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x30), 21.0);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x31), 21.1);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x32), 21.2);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x33), 21.3);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x34), 21.4);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x35), 21.5);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x36), 21.6);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x37), 21.7);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x38), 21.8);
      temps.put(new ByteTemp(0x32, 0x31, 0x2E, 0x39), 21.9);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x30), 22.0);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x31), 22.1);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x32), 22.2);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x33), 22.3);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x34), 22.4);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x35), 22.5);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x36), 22.6);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x37), 22.7);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x38), 22.8);
      temps.put(new ByteTemp(0x32, 0x32, 0x2E, 0x39), 22.9);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x30), 23.0);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x31), 23.1);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x32), 23.2);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x33), 23.3);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x34), 23.4);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x35), 23.5);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x36), 23.6);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x37), 23.7);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x38), 23.8);
      temps.put(new ByteTemp(0x32, 0x33, 0x2E, 0x39), 23.9);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x30), 24.0);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x31), 24.1);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x32), 24.2);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x33), 24.3);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x34), 24.4);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x35), 24.5);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x36), 24.6);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x37), 24.7);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x38), 24.8);
      temps.put(new ByteTemp(0x32, 0x34, 0x2E, 0x39), 24.9);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x30), 25.0);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x31), 25.1);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x32), 25.2);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x33), 25.3);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x34), 25.4);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x35), 25.5);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x36), 25.6);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x37), 25.7);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x38), 25.8);
      temps.put(new ByteTemp(0x32, 0x35, 0x2E, 0x39), 25.9);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x30), 26.0);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x31), 26.1);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x32), 26.2);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x33), 26.3);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x34), 26.4);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x35), 26.5);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x36), 26.6);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x37), 26.7);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x38), 26.8);
      temps.put(new ByteTemp(0x32, 0x36, 0x2E, 0x39), 26.9);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x30), 27.0);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x31), 27.1);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x32), 27.2);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x33), 27.3);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x34), 27.4);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x35), 27.5);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x36), 27.6);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x37), 27.7);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x38), 27.8);
      temps.put(new ByteTemp(0x32, 0x37, 0x2E, 0x39), 27.9);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x30), 28.0);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x31), 28.1);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x32), 28.2);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x33), 28.3);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x34), 28.4);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x35), 28.5);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x36), 28.6);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x37), 28.7);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x38), 28.8);
      temps.put(new ByteTemp(0x32, 0x38, 0x2E, 0x39), 28.9);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x30), 29.0);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x31), 29.1);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x32), 29.2);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x33), 29.3);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x34), 29.4);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x35), 29.5);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x36), 29.6);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x37), 29.7);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x38), 29.8);
      temps.put(new ByteTemp(0x32, 0x39, 0x2E, 0x39), 29.9);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x30), 30.0);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x31), 30.1);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x32), 30.2);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x33), 30.3);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x34), 30.4);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x35), 30.5);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x36), 30.6);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x37), 30.7);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x38), 30.8);
      temps.put(new ByteTemp(0x33, 0x30, 0x2E, 0x39), 30.9);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x30), 31.0);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x31), 31.1);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x32), 31.2);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x33), 31.3);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x34), 31.4);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x35), 31.5);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x36), 31.6);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x37), 31.7);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x38), 31.8);
      temps.put(new ByteTemp(0x33, 0x31, 0x2E, 0x39), 31.9);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x30), 32.0);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x31), 32.1);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x32), 32.2);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x33), 32.3);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x34), 32.4);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x35), 32.5);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x36), 32.6);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x37), 32.7);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x38), 32.8);
      temps.put(new ByteTemp(0x33, 0x32, 0x2E, 0x39), 32.9);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x30), 33.0);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x31), 33.1);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x32), 33.2);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x33), 33.3);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x34), 33.4);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x35), 33.5);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x36), 33.6);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x37), 33.7);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x38), 33.8);
      temps.put(new ByteTemp(0x33, 0x33, 0x2E, 0x39), 33.9);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x30), 34.0);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x31), 34.1);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x32), 34.2);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x33), 34.3);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x34), 34.4);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x35), 34.5);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x36), 34.6);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x37), 34.7);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x38), 34.8);
      temps.put(new ByteTemp(0x33, 0x34, 0x2E, 0x39), 34.9);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x30), 35.0);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x31), 35.1);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x32), 35.2);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x33), 35.3);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x34), 35.4);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x35), 35.5);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x36), 35.6);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x37), 35.7);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x38), 35.8);
      temps.put(new ByteTemp(0x33, 0x35, 0x2E, 0x39), 35.9);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x30), 36.0);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x31), 36.1);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x32), 36.2);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x33), 36.3);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x34), 36.4);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x35), 36.5);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x36), 36.6);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x37), 36.7);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x38), 36.8);
      temps.put(new ByteTemp(0x33, 0x36, 0x2E, 0x39), 36.9);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x30), 37.0);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x31), 37.1);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x32), 37.2);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x33), 37.3);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x34), 37.4);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x35), 37.5);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x36), 37.6);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x37), 37.7);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x38), 37.8);
      temps.put(new ByteTemp(0x33, 0x37, 0x2E, 0x39), 37.9);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x30), 38.0);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x31), 38.1);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x32), 38.2);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x33), 38.3);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x34), 38.4);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x35), 38.5);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x36), 38.6);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x37), 38.7);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x38), 38.8);
      temps.put(new ByteTemp(0x33, 0x38, 0x2E, 0x39), 38.9);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x30), 39.0);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x31), 39.1);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x32), 39.2);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x33), 39.3);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x34), 39.4);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x35), 39.5);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x36), 39.6);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x37), 39.7);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x38), 39.8);
      temps.put(new ByteTemp(0x33, 0x39, 0x2E, 0x39), 39.9);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x30), 40.0);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x31), 40.1);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x32), 40.2);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x33), 40.3);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x34), 40.4);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x35), 40.5);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x36), 40.6);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x37), 40.7);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x38), 40.8);
      temps.put(new ByteTemp(0x34, 0x30, 0x2E, 0x39), 40.9);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x30), 41.0);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x31), 41.1);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x32), 41.2);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x33), 41.3);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x34), 41.4);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x35), 41.5);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x36), 41.6);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x37), 41.7);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x38), 41.8);
      temps.put(new ByteTemp(0x34, 0x31, 0x2E, 0x39), 41.9);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x30), 42.0);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x31), 42.1);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x32), 42.2);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x33), 42.3);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x34), 42.4);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x35), 42.5);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x36), 42.6);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x37), 42.7);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x38), 42.8);
      temps.put(new ByteTemp(0x34, 0x32, 0x2E, 0x39), 42.9);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x30), 43.0);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x31), 43.1);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x32), 43.2);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x33), 43.3);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x34), 43.4);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x35), 43.5);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x36), 43.6);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x37), 43.7);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x38), 43.8);
      temps.put(new ByteTemp(0x34, 0x33, 0x2E, 0x39), 43.9);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x30), 44.0);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x31), 44.1);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x32), 44.2);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x33), 44.3);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x34), 44.4);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x35), 44.5);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x36), 44.6);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x37), 44.7);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x38), 44.8);
      temps.put(new ByteTemp(0x34, 0x34, 0x2E, 0x39), 44.9);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x30), 45.0);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x31), 45.1);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x32), 45.2);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x33), 45.3);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x34), 45.4);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x35), 45.5);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x36), 45.6);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x37), 45.7);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x38), 45.8);
      temps.put(new ByteTemp(0x34, 0x35, 0x2E, 0x39), 45.9);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x30), 46.0);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x31), 46.1);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x32), 46.2);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x33), 46.3);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x34), 46.4);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x35), 46.5);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x36), 46.6);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x37), 46.7);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x38), 46.8);
      temps.put(new ByteTemp(0x34, 0x36, 0x2E, 0x39), 46.9);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x30), 47.0);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x31), 47.1);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x32), 47.2);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x33), 47.3);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x34), 47.4);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x35), 47.5);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x36), 47.6);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x37), 47.7);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x38), 47.8);
      temps.put(new ByteTemp(0x34, 0x37, 0x2E, 0x39), 47.9);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x30), 48.0);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x31), 48.1);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x32), 48.2);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x33), 48.3);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x34), 48.4);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x35), 48.5);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x36), 48.6);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x37), 48.7);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x38), 48.8);
      temps.put(new ByteTemp(0x34, 0x38, 0x2E, 0x39), 48.9);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x30), 49.0);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x31), 49.1);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x32), 49.2);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x33), 49.3);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x34), 49.4);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x35), 49.5);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x36), 49.6);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x37), 49.7);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x38), 49.8);
      temps.put(new ByteTemp(0x34, 0x39, 0x2E, 0x39), 49.9);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x30), 50.0);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x31), 50.1);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x32), 50.2);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x33), 50.3);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x34), 50.4);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x35), 50.5);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x36), 50.6);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x37), 50.7);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x38), 50.8);
      temps.put(new ByteTemp(0x35, 0x30, 0x2E, 0x39), 50.9);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x30), 51.0);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x31), 51.1);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x32), 51.2);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x33), 51.3);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x34), 51.4);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x35), 51.5);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x36), 51.6);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x37), 51.7);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x38), 51.8);
      temps.put(new ByteTemp(0x35, 0x31, 0x2E, 0x39), 51.9);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x30), 52.0);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x31), 52.1);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x32), 52.2);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x33), 52.3);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x34), 52.4);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x35), 52.5);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x36), 52.6);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x37), 52.7);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x38), 52.8);
      temps.put(new ByteTemp(0x35, 0x32, 0x2E, 0x39), 52.9);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x30), 53.0);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x31), 53.1);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x32), 53.2);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x33), 53.3);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x34), 53.4);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x35), 53.5);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x36), 53.6);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x37), 53.7);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x38), 53.8);
      temps.put(new ByteTemp(0x35, 0x33, 0x2E, 0x39), 53.9);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x30), 54.0);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x31), 54.1);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x32), 54.2);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x33), 54.3);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x34), 54.4);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x35), 54.5);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x36), 54.6);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x37), 54.7);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x38), 54.8);
      temps.put(new ByteTemp(0x35, 0x34, 0x2E, 0x39), 54.9);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x30), 55.0);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x31), 55.1);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x32), 55.2);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x33), 55.3);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x34), 55.4);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x35), 55.5);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x36), 55.6);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x37), 55.7);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x38), 55.8);
      temps.put(new ByteTemp(0x35, 0x35, 0x2E, 0x39), 55.9);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x30), 56.0);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x31), 56.1);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x32), 56.2);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x33), 56.3);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x34), 56.4);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x35), 56.5);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x36), 56.6);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x37), 56.7);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x38), 56.8);
      temps.put(new ByteTemp(0x35, 0x36, 0x2E, 0x39), 56.9);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x30), 57.0);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x31), 57.1);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x32), 57.2);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x33), 57.3);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x34), 57.4);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x35), 57.5);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x36), 57.6);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x37), 57.7);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x38), 57.8);
      temps.put(new ByteTemp(0x35, 0x37, 0x2E, 0x39), 57.9);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x30), 58.0);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x31), 58.1);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x32), 58.2);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x33), 58.3);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x34), 58.4);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x35), 58.5);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x36), 58.6);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x37), 58.7);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x38), 58.8);
      temps.put(new ByteTemp(0x35, 0x38, 0x2E, 0x39), 58.9);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x30), 59.0);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x31), 59.1);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x32), 59.2);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x33), 59.3);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x34), 59.4);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x35), 59.5);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x36), 59.6);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x37), 59.7);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x38), 59.8);
      temps.put(new ByteTemp(0x35, 0x39, 0x2E, 0x39), 59.9);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x30), 60.0);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x31), 60.1);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x32), 60.2);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x33), 60.3);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x34), 60.4);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x35), 60.5);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x36), 60.6);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x37), 60.7);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x38), 60.8);
      temps.put(new ByteTemp(0x36, 0x30, 0x2E, 0x39), 60.9);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x30), 61.0);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x31), 61.1);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x32), 61.2);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x33), 61.3);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x34), 61.4);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x35), 61.5);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x36), 61.6);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x37), 61.7);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x38), 61.8);
      temps.put(new ByteTemp(0x36, 0x31, 0x2E, 0x39), 61.9);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x30), 62.0);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x31), 62.1);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x32), 62.2);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x33), 62.3);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x34), 62.4);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x35), 62.5);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x36), 62.6);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x37), 62.7);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x38), 62.8);
      temps.put(new ByteTemp(0x36, 0x32, 0x2E, 0x39), 62.9);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x30), 63.0);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x31), 63.1);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x32), 63.2);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x33), 63.3);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x34), 63.4);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x35), 63.5);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x36), 63.6);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x37), 63.7);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x38), 63.8);
      temps.put(new ByteTemp(0x36, 0x33, 0x2E, 0x39), 63.9);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x30), 64.0);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x31), 64.1);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x32), 64.2);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x33), 64.3);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x34), 64.4);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x35), 64.5);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x36), 64.6);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x37), 64.7);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x38), 64.8);
      temps.put(new ByteTemp(0x36, 0x34, 0x2E, 0x39), 64.9);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x30), 65.0);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x31), 65.1);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x32), 65.2);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x33), 65.3);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x34), 65.4);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x35), 65.5);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x36), 65.6);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x37), 65.7);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x38), 65.8);
      temps.put(new ByteTemp(0x36, 0x35, 0x2E, 0x39), 65.9);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x30), 66.0);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x31), 66.1);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x32), 66.2);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x33), 66.3);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x34), 66.4);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x35), 66.5);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x36), 66.6);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x37), 66.7);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x38), 66.8);
      temps.put(new ByteTemp(0x36, 0x36, 0x2E, 0x39), 66.9);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x30), 67.0);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x31), 67.1);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x32), 67.2);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x33), 67.3);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x34), 67.4);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x35), 67.5);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x36), 67.6);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x37), 67.7);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x38), 67.8);
      temps.put(new ByteTemp(0x36, 0x37, 0x2E, 0x39), 67.9);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x30), 68.0);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x31), 68.1);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x32), 68.2);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x33), 68.3);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x34), 68.4);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x35), 68.5);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x36), 68.6);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x37), 68.7);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x38), 68.8);
      temps.put(new ByteTemp(0x36, 0x38, 0x2E, 0x39), 68.9);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x30), 69.0);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x31), 69.1);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x32), 69.2);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x33), 69.3);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x34), 69.4);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x35), 69.5);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x36), 69.6);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x37), 69.7);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x38), 69.8);
      temps.put(new ByteTemp(0x36, 0x39, 0x2E, 0x39), 69.9);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x30), 70.0);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x31), 70.1);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x32), 70.2);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x33), 70.3);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x34), 70.4);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x35), 70.5);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x36), 70.6);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x37), 70.7);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x38), 70.8);
      temps.put(new ByteTemp(0x37, 0x30, 0x2E, 0x39), 70.9);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x30), 71.0);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x31), 71.1);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x32), 71.2);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x33), 71.3);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x34), 71.4);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x35), 71.5);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x36), 71.6);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x37), 71.7);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x38), 71.8);
      temps.put(new ByteTemp(0x37, 0x31, 0x2E, 0x39), 71.9);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x30), 72.0);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x31), 72.1);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x32), 72.2);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x33), 72.3);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x34), 72.4);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x35), 72.5);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x36), 72.6);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x37), 72.7);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x38), 72.8);
      temps.put(new ByteTemp(0x37, 0x32, 0x2E, 0x39), 72.9);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x30), 73.0);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x31), 73.1);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x32), 73.2);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x33), 73.3);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x34), 73.4);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x35), 73.5);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x36), 73.6);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x37), 73.7);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x38), 73.8);
      temps.put(new ByteTemp(0x37, 0x33, 0x2E, 0x39), 73.9);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x30), 74.0);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x31), 74.1);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x32), 74.2);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x33), 74.3);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x34), 74.4);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x35), 74.5);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x36), 74.6);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x37), 74.7);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x38), 74.8);
      temps.put(new ByteTemp(0x37, 0x34, 0x2E, 0x39), 74.9);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x30), 75.0);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x31), 75.1);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x32), 75.2);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x33), 75.3);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x34), 75.4);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x35), 75.5);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x36), 75.6);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x37), 75.7);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x38), 75.8);
      temps.put(new ByteTemp(0x37, 0x35, 0x2E, 0x39), 75.9);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x30), 76.0);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x31), 76.1);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x32), 76.2);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x33), 76.3);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x34), 76.4);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x35), 76.5);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x36), 76.6);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x37), 76.7);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x38), 76.8);
      temps.put(new ByteTemp(0x37, 0x36, 0x2E, 0x39), 76.9);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x30), 77.0);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x31), 77.1);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x32), 77.2);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x33), 77.3);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x34), 77.4);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x35), 77.5);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x36), 77.6);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x37), 77.7);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x38), 77.8);
      temps.put(new ByteTemp(0x37, 0x37, 0x2E, 0x39), 77.9);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x30), 78.0);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x31), 78.1);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x32), 78.2);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x33), 78.3);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x34), 78.4);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x35), 78.5);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x36), 78.6);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x37), 78.7);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x38), 78.8);
      temps.put(new ByteTemp(0x37, 0x38, 0x2E, 0x39), 78.9);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x30), 79.0);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x31), 79.1);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x32), 79.2);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x33), 79.3);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x34), 79.4);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x35), 79.5);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x36), 79.6);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x37), 79.7);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x38), 79.8);
      temps.put(new ByteTemp(0x37, 0x39, 0x2E, 0x39), 79.9);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x30), 80.0);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x31), 80.1);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x32), 80.2);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x33), 80.3);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x34), 80.4);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x35), 80.5);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x36), 80.6);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x37), 80.7);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x38), 80.8);
      temps.put(new ByteTemp(0x38, 0x30, 0x2E, 0x39), 80.9);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x30), 81.0);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x31), 81.1);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x32), 81.2);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x33), 81.3);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x34), 81.4);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x35), 81.5);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x36), 81.6);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x37), 81.7);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x38), 81.8);
      temps.put(new ByteTemp(0x38, 0x31, 0x2E, 0x39), 81.9);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x30), 82.0);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x31), 82.1);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x32), 82.2);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x33), 82.3);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x34), 82.4);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x35), 82.5);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x36), 82.6);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x37), 82.7);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x38), 82.8);
      temps.put(new ByteTemp(0x38, 0x32, 0x2E, 0x39), 82.9);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x30), 83.0);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x31), 83.1);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x32), 83.2);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x33), 83.3);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x34), 83.4);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x35), 83.5);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x36), 83.6);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x37), 83.7);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x38), 83.8);
      temps.put(new ByteTemp(0x38, 0x33, 0x2E, 0x39), 83.9);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x30), 84.0);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x31), 84.1);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x32), 84.2);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x33), 84.3);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x34), 84.4);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x35), 84.5);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x36), 84.6);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x37), 84.7);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x38), 84.8);
      temps.put(new ByteTemp(0x38, 0x34, 0x2E, 0x39), 84.9);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x30), 85.0);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x31), 85.1);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x32), 85.2);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x33), 85.3);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x34), 85.4);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x35), 85.5);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x36), 85.6);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x37), 85.7);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x38), 85.8);
      temps.put(new ByteTemp(0x38, 0x35, 0x2E, 0x39), 85.9);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x30), 86.0);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x31), 86.1);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x32), 86.2);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x33), 86.3);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x34), 86.4);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x35), 86.5);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x36), 86.6);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x37), 86.7);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x38), 86.8);
      temps.put(new ByteTemp(0x38, 0x36, 0x2E, 0x39), 86.9);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x30), 87.0);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x31), 87.1);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x32), 87.2);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x33), 87.3);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x34), 87.4);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x35), 87.5);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x36), 87.6);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x37), 87.7);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x38), 87.8);
      temps.put(new ByteTemp(0x38, 0x37, 0x2E, 0x39), 87.9);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x30), 88.0);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x31), 88.1);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x32), 88.2);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x33), 88.3);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x34), 88.4);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x35), 88.5);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x36), 88.6);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x37), 88.7);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x38), 88.8);
      temps.put(new ByteTemp(0x38, 0x38, 0x2E, 0x39), 88.9);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x30), 89.0);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x31), 89.1);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x32), 89.2);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x33), 89.3);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x34), 89.4);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x35), 89.5);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x36), 89.6);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x37), 89.7);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x38), 89.8);
      temps.put(new ByteTemp(0x38, 0x39, 0x2E, 0x39), 89.9);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x30), 90.0);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x31), 90.1);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x32), 90.2);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x33), 90.3);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x34), 90.4);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x35), 90.5);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x36), 90.6);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x37), 90.7);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x38), 90.8);
      temps.put(new ByteTemp(0x39, 0x30, 0x2E, 0x39), 90.9);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x30), 91.0);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x31), 91.1);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x32), 91.2);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x33), 91.3);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x34), 91.4);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x35), 91.5);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x36), 91.6);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x37), 91.7);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x38), 91.8);
      temps.put(new ByteTemp(0x39, 0x31, 0x2E, 0x39), 91.9);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x30), 92.0);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x31), 92.1);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x32), 92.2);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x33), 92.3);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x34), 92.4);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x35), 92.5);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x36), 92.6);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x37), 92.7);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x38), 92.8);
      temps.put(new ByteTemp(0x39, 0x32, 0x2E, 0x39), 92.9);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x30), 93.0);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x31), 93.1);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x32), 93.2);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x33), 93.3);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x34), 93.4);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x35), 93.5);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x36), 93.6);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x37), 93.7);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x38), 93.8);
      temps.put(new ByteTemp(0x39, 0x33, 0x2E, 0x39), 93.9);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x30), 94.0);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x31), 94.1);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x32), 94.2);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x33), 94.3);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x34), 94.4);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x35), 94.5);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x36), 94.6);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x37), 94.7);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x38), 94.8);
      temps.put(new ByteTemp(0x39, 0x34, 0x2E, 0x39), 94.9);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x30), 95.0);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x31), 95.1);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x32), 95.2);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x33), 95.3);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x34), 95.4);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x35), 95.5);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x36), 95.6);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x37), 95.7);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x38), 95.8);
      temps.put(new ByteTemp(0x39, 0x35, 0x2E, 0x39), 95.9);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x30), 96.0);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x31), 96.1);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x32), 96.2);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x33), 96.3);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x34), 96.4);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x35), 96.5);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x36), 96.6);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x37), 96.7);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x38), 96.8);
      temps.put(new ByteTemp(0x39, 0x36, 0x2E, 0x39), 96.9);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x30), 97.0);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x31), 97.1);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x32), 97.2);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x33), 97.3);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x34), 97.4);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x35), 97.5);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x36), 97.6);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x37), 97.7);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x38), 97.8);
      temps.put(new ByteTemp(0x39, 0x37, 0x2E, 0x39), 97.9);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x30), 98.0);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x31), 98.1);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x32), 98.2);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x33), 98.3);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x34), 98.4);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x35), 98.5);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x36), 98.6);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x37), 98.7);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x38), 98.8);
      temps.put(new ByteTemp(0x39, 0x38, 0x2E, 0x39), 98.9);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x30), 99.0);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x31), 99.1);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x32), 99.2);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x33), 99.3);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x34), 99.4);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x35), 99.5);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x36), 99.6);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x37), 99.7);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x38), 99.8);
      temps.put(new ByteTemp(0x39, 0x39, 0x2E, 0x39), 99.9);
      // special case: negative zeroes :see_no_evil:
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x31), -0.1);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x32), -0.2);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x33), -0.3);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x34), -0.4);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x35), -0.5);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x36), -0.6);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x37), -0.7);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x38), -0.8);
      temps.put(new ByteTemp(0x2D, 0x30, 0x2E, 0x39), -0.9);
    }

    public ByteTemp(int one, int two, int three) {
      this(one, two, three, (byte) 0xff, (byte) 0xff);
    }

    public ByteTemp(int one, int two, int three, int four) {
      this(one, two, three, four, (byte) 0xff);
    }

    public ByteTemp(int one, int two, int three, int four, int five) {
      this((byte) one, (byte) two, (byte) three, (byte) four, (byte) five);
    }

    public static void main(String[] args) {
      for (int i = -99; i <= 99; i++) {
        for (int ii = 0; ii < 10; ii++) {
          String str = i + "." + ii;
          var chars = str.toCharArray();
          System.out.print("new ByteTemp(");
          for (char c : chars) {
            System.out.printf("0x%02X,", (byte) c);
          }
          System.out.print("), " + Double.parseDouble(str) + ")");
          System.out.println();
        }
      }
    }
  }
}
